// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    // Relation: A user can have many items in their cart.
    carrinho  Carrinho[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}



// 1. Defines the 'Produto' (Product) model.
model Produto {
  id          Int      @id @default(autoincrement())
  nome        String
  preco       Float
  descricao   String
  especificacoes String? // Optional field
  imagem      String? // Optional field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation: A product can be in many cart items.
  carrinhoItems Carrinho[]
}


// 2. Defines the 'Carrinho' (Cart) model. This is a join table.
model Carrinho {
  id           Int      @id @default(autoincrement())
  quantidade   Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Foreign key for the user - This should be String to match User.id
  usuarioId    String

  // Foreign key for the product
  produtoId    Int

  // Relations to the other models
  usuario      User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  produto      Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, produtoId]) // Ensures a user can't have duplicate products in the cart
}